import numpy as np
import pandas as pd
from flask import Flask, request, render_template
import pickle
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

app = Flask(__name__)

# Load dataset
df = pd.read_csv("Crop_recommendation.csv").drop_duplicates()

# Define feature columns
FEATURE_COLUMNS = ["humidity", "temperature", "potassium", "nitrogen", "phosphorus", "ph", "rainfall"]

# Encode Soil Type (One-Hot Encoding)
soil_types = ['sandy', 'clayey', 'loamy', 'silty', 'peaty', 'saline', 'laterite']
for soil in soil_types:
    df[soil] = (df['soil_type'] == soil).astype(int)

# Prepare data
X = df.drop(columns=['crop', 'yield', 'soil_type'])
y_crop = df["crop"]
y_yield = df["yield"]

# Encode crop labels
y_crop_encoded, crop_mapping = pd.factorize(y_crop)

# Split dataset
X_train, X_test, y_crop_train, y_crop_test, y_yield_train, y_yield_test = train_test_split(
    X, y_crop_encoded, y_yield, test_size=0.2, random_state=42
)

# Train yield prediction model (Regression)
yield_regressor = RandomForestRegressor()
yield_regressor.fit(X_train, y_yield_train)  


# Define models to compare
models = {
    "Random Forest": RandomForestClassifier(),
    "Decision Tree": DecisionTreeClassifier(),
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "Support Vector Machine": SVC()
}

# Train and evaluate models
accuracy_results = {}
for name, model in models.items():
    model.fit(X_train, y_crop_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_crop_test, y_pred) * 100  # Convert to percentage
    accuracy_results[name] = round(accuracy, 2)

# Select the best model
best_model_name = max(accuracy_results, key=accuracy_results.get)
best_model = models[best_model_name]
best_model.fit(X_train, y_crop_train)


# Save models
pickle.dump(best_model, open("crop_model.pkl", "wb"))
pickle.dump(yield_regressor, open("yield_model.pkl", "wb"))
pickle.dump(crop_mapping, open("crop_mapping.pkl", "wb"))

@app.route("/")
def home():
    return render_template("app3.html", accuracy_results=accuracy_results,soil_types=soil_types,form_data={})

@app.route("/predict", methods=["POST"])
def predict():
    try:
        # Load models
        crop_classifier = pickle.load(open("crop_model.pkl", "rb"))
        yield_regressor = pickle.load(open("yield_model.pkl", "rb"))
        crop_mapping = pickle.load(open("crop_mapping.pkl", "rb"))

        # Get user input
        features = [float(request.form[key]) for key in FEATURE_COLUMNS]
        #Soil type
        soil_type = request.form['soil_type']
        soil_features = [1 if soil == soil_type else 0 for soil in soil_types]
        
        features.extend(soil_features)
        
        # Ensure input matches model training columns
        input_data = pd.DataFrame([features], columns=X.columns)

        # Predict crop
        crop_pred = crop_classifier.predict(input_data)[0]
        crop_name = crop_mapping[crop_pred]

        # Predict yield
        yield_pred = yield_regressor.predict(input_data)[0]

        return render_template("app3.html", crop=crop_name, yield_pred=round(yield_pred, 2), accuracy_results=accuracy_results,form_data=request.form,soil_types=soil_types)

    except Exception as e:
        return render_template("app3.html", error=str(e), accuracy_results=accuracy_results,form_data=request.form,soil_types=soil_types)

if __name__ == "__main__":
    app.run(debug=True)

